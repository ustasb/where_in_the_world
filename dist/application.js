// Generated by CoffeeScript 1.6.3
(function() {
  var CapitalQuiz, FlightControl, LightBox, LocationQuiz, MainMenu, Map, Plane, ProgressBar, QuizBox, REGION_DATA;

  window.App = (function() {
    var CORRECT_REGION_COLOR, INCORRECT_REGION_COLOR, MAP_CONTAINER_ID;

    MAP_CONTAINER_ID = 'map-container';

    CORRECT_REGION_COLOR = '#2ECC71';

    INCORRECT_REGION_COLOR = '#E74C3C';

    function App() {
      var _this = this;
      QuizBox.init();
      QuizBox.onMenuClick = function() {
        return _this._showMainMenuView();
      };
      MainMenu.init({
        onSelectMap: function(mapName) {
          return _this._renderMap(mapName);
        },
        onStartQuiz: function() {
          return _this._startQuiz();
        }
      });
      this._showMainMenuView();
      this._renderMap(MainMenu.getSelectedMap());
    }

    App.prototype._showMainMenuView = function() {
      ProgressBar.hide();
      QuizBox.hide();
      return MainMenu.show();
    };

    App.prototype._showQuizView = function(showInput) {
      MainMenu.hide();
      QuizBox.show(showInput);
      return ProgressBar.show();
    };

    App.prototype._startQuiz = function() {
      this.map.clearSelectedRegions();
      ProgressBar.reset();
      MainMenu.hideScore();
      switch (MainMenu.getSelectedQuiz()) {
        case 'location':
          this._showQuizView();
          this._initLocationQuiz();
          break;
        case 'capital':
          this._showQuizView(true);
          this._initCapitalQuiz();
      }
      return this.quizStartTime = (new Date).getTime();
    };

    App.prototype._endQuiz = function(numCorrect, questionCount) {
      var elapsedTime;
      elapsedTime = (new Date).getTime() - this.quizStartTime;
      this._showMainMenuView();
      return MainMenu.showScore(numCorrect, questionCount, elapsedTime);
    };

    App.prototype._renderMap = function(mapName) {
      if (this.map) {
        this.map.destroy();
      }
      this.map = new Map(MAP_CONTAINER_ID, mapName);
      return this.map.render();
    };

    App.prototype._initLocationQuiz = function() {
      var quiz,
        _this = this;
      quiz = new LocationQuiz(this.map.getRegions());
      QuizBox.askQuestion(quiz.getQuestion());
      QuizBox.onSkipQuestion = function() {
        return QuizBox.askQuestion(quiz.getQuestion());
      };
      return this.map.bindEvents({
        regionLabelShow: function(e, label, code) {
          return _this.map.isRegionSelected(code);
        },
        regionClick: function(e, regionCode) {
          var askedRegion, askedRegionCode, clickedRegion, nextQuestion, status;
          clickedRegion = _this.map.regionForCode(regionCode);
          askedRegion = quiz.currentRegion;
          if (quiz.answerQuestion(clickedRegion)) {
            _this.map.selectRegion(regionCode, CORRECT_REGION_COLOR);
          } else {
            askedRegionCode = _this.map.codeForRegion(askedRegion);
            _this.map.highlightRegion(askedRegionCode);
            _this.map.selectRegion(askedRegionCode, INCORRECT_REGION_COLOR);
          }
          ProgressBar.update(quiz.percentComplete());
          if (nextQuestion = quiz.getQuestion()) {
            return QuizBox.askQuestion(nextQuestion);
          } else {
            status = quiz.status();
            return _this._endQuiz(status.numCorrect, status.questionCount);
          }
        }
      });
    };

    App.prototype._initCapitalQuiz = function() {
      var mapName, quiz,
        _this = this;
      mapName = MainMenu.getSelectedMap();
      quiz = new CapitalQuiz(this.map.getRegions(), mapName === 'us_mill_en');
      QuizBox.askQuestion(quiz.getQuestion());
      QuizBox.onSkipQuestion = function() {
        return QuizBox.askQuestion(quiz.getQuestion());
      };
      QuizBox.onInputEnter = function($input) {
        var askedRegion, askedRegionCode, guess, levDist, msgPrefix, nextQuestion, status;
        guess = $input.val();
        askedRegion = quiz.currentRegion;
        askedRegionCode = _this.map.codeForRegion(askedRegion);
        if ((levDist = quiz.answerQuestion(guess)) !== false) {
          if (levDist > 0) {
            QuizBox.flashMessage("Correct, but the spelling is: " + (quiz.dataForRegion(askedRegion).capital), 'warning');
          }
          _this.map.selectRegion(askedRegionCode, CORRECT_REGION_COLOR);
        } else {
          msgPrefix = guess === '' ? "It's " : "Nope, it's ";
          QuizBox.flashMessage(msgPrefix + quiz.dataForRegion(askedRegion).capital, 'error');
          _this.map.selectRegion(askedRegionCode, INCORRECT_REGION_COLOR);
        }
        _this.map.highlightRegion(askedRegionCode);
        ProgressBar.update(quiz.percentComplete());
        if (nextQuestion = quiz.getQuestion()) {
          return QuizBox.askQuestion(nextQuestion);
        } else {
          status = quiz.status();
          return _this._endQuiz(status.numCorrect, status.questionCount);
        }
      };
      return this.map.bindEvents({
        regionLabelShow: function(e, label, code) {
          var region;
          if (_this.map.isRegionSelected(code)) {
            region = label.text();
            return label.text("" + region + " | " + (quiz.dataForRegion(region).capital));
          }
        }
      });
    };

    return App;

  })();

  CapitalQuiz = (function() {
    function CapitalQuiz(regions, usStates) {
      if (usStates == null) {
        usStates = false;
      }
      this.regions = regions;
      this.regionsCount = regions.length;
      this.regionData = REGION_DATA[usStates ? 'usStates' : 'countries'];
      this.currentRegion = null;
      this.numCorrect = 0;
    }

    CapitalQuiz.prototype.getQuestion = function() {
      var randomIndex;
      if (this.regions.length === 0) {
        return null;
      } else {
        randomIndex = Math.floor(Math.random() * this.regions.length);
        this.currentRegion = this.regions[randomIndex];
        return "What is the capital of " + (this.dataForRegion(this.currentRegion).prettyName) + "?";
      }
    };

    CapitalQuiz.prototype.answerQuestion = function(guess) {
      var index, levDist;
      index = $.inArray(this.currentRegion, this.regions);
      this.regions.splice(index, 1);
      levDist = this._validateGuess(guess, this.dataForRegion(this.currentRegion).capital);
      this.currentRegion = null;
      if (levDist === false) {
        return false;
      } else {
        this.numCorrect += 1;
        return levDist;
      }
    };

    CapitalQuiz.prototype.percentComplete = function() {
      return (1 - this.regions.length / this.regionsCount) * 100;
    };

    CapitalQuiz.prototype.status = function() {
      return {
        questionsLeft: this.regions.length,
        questionCount: this.regionsCount,
        numCorrect: this.numCorrect
      };
    };

    CapitalQuiz.prototype.dataForRegion = function(region) {
      region = region.toLowerCase();
      return this.regionData[region];
    };

    CapitalQuiz.prototype._levenshteinDist = function(str1, str2) {
      var d, i, j, m, n, _i, _j, _k, _l;
      m = str1.length;
      n = str2.length;
      d = [];
      if (!m) {
        return n;
      }
      if (!n) {
        return m;
      }
      for (i = _i = 0; 0 <= m ? _i <= m : _i >= m; i = 0 <= m ? ++_i : --_i) {
        d[i] = [i];
      }
      for (j = _j = 1; 1 <= n ? _j <= n : _j >= n; j = 1 <= n ? ++_j : --_j) {
        d[0][j] = j;
      }
      for (i = _k = 1; 1 <= m ? _k <= m : _k >= m; i = 1 <= m ? ++_k : --_k) {
        for (j = _l = 1; 1 <= n ? _l <= n : _l >= n; j = 1 <= n ? ++_l : --_l) {
          if (str1[i - 1] === str2[j - 1]) {
            d[i][j] = d[i - 1][j - 1];
          } else {
            d[i][j] = Math.min(d[i - 1][j], d[i][j - 1], d[i - 1][j - 1]) + 1;
          }
        }
      }
      return d[m][n];
    };

    CapitalQuiz.prototype._validateGuess = function(guess, answer) {
      var levDist;
      guess = guess.toLowerCase();
      answer = answer.toLowerCase();
      if (guess[0] === answer[0]) {
        levDist = this._levenshteinDist(guess, answer);
        if (levDist <= Math.floor(answer.length / 3)) {
          return levDist;
        }
      }
      return false;
    };

    return CapitalQuiz;

  })();

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  FlightControl = (function() {
    var MIN_FLIGHT_DIST;

    MIN_FLIGHT_DIST = 10;

    function FlightControl(map, maxPlaneCount, planeSpeed) {
      this.map = map;
      this.maxPlaneCount = maxPlaneCount;
      this.planeSpeed = planeSpeed;
      this.planes = [];
      this.halted = false;
    }

    FlightControl.prototype.destroyAll = function() {
      var plane, _i, _len, _ref, _results;
      this.halted = true;
      _ref = this.planes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
        plane = _ref[_i];
        _results.push(plane.destroy());
      }
      return _results;
    };

    FlightControl.prototype.spawnFlights = function() {
      var animate,
        _this = this;
      this.halted = false;
      animate = function() {
        if (!_this.halted) {
          _this._spawnPlanes();
          _this._animatePlanes();
          return requestAnimationFrame(function() {
            return animate();
          });
        }
      };
      return animate();
    };

    FlightControl.prototype._createFlight = function() {
      var dist, end, start;
      dist = 0;
      start = this.map.getRandomLatLng();
      while (!(dist >= MIN_FLIGHT_DIST)) {
        end = this.map.getRandomLatLng();
        dist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      }
      return {
        start: start,
        end: end
      };
    };

    FlightControl.prototype._spawnPlanes = function() {
      var flight, _results;
      _results = [];
      while (!(this.planes.length >= this.maxPlaneCount)) {
        flight = this._createFlight();
        _results.push(this.planes.push(new Plane(this.map, flight.start, flight.end, this.planeSpeed)));
      }
      return _results;
    };

    FlightControl.prototype._animatePlanes = function() {
      var i, plane, _results;
      i = this.planes.length;
      _results = [];
      while (i--) {
        plane = this.planes[i];
        if (plane.hasLanded()) {
          plane.destroy();
          _results.push(this.planes.splice(i, 1));
        } else {
          plane.update();
          _results.push(plane.render());
        }
      }
      return _results;
    };

    return FlightControl;

  })();

  LightBox = (function() {
    var $backdrop;

    $backdrop = $('<div class="light-box-bg"></div>');

    LightBox.showBackdrop = function() {
      return $(document.body).append($backdrop);
    };

    LightBox.hideBackdrop = function() {
      return $backdrop.remove();
    };

    function LightBox(containerID) {
      this.el = $('#' + containerID);
      this._centerInWindow();
      this.show();
      this._bindEvents();
    }

    LightBox.prototype.hide = function() {
      LightBox.hideBackdrop();
      return this.el.hide();
    };

    LightBox.prototype.show = function() {
      LightBox.showBackdrop();
      return this.el.show();
    };

    LightBox.prototype._bindEvents = function() {
      var _this = this;
      return $(window).resize(function() {
        return _this._centerInWindow();
      });
    };

    LightBox.prototype._centerInWindow = function() {
      var $window, verticalOffset;
      $window = $(window);
      verticalOffset = 50;
      return this.el.css({
        left: ($window.width() - this.el.width()) / 2,
        top: ($window.height() - this.el.height()) / 2 - verticalOffset
      });
    };

    return LightBox;

  })();

  LocationQuiz = (function() {
    function LocationQuiz(regions) {
      this.regions = regions;
      this.regionsCount = regions.length;
      this.currentRegion = null;
      this.numCorrect = 0;
    }

    LocationQuiz.prototype.getQuestion = function() {
      var randomIndex;
      if (this.regions.length === 0) {
        return null;
      } else {
        randomIndex = Math.floor(Math.random() * this.regions.length);
        this.currentRegion = this.regions[randomIndex];
        return "Where is " + this.currentRegion + "?";
      }
    };

    LocationQuiz.prototype.answerQuestion = function(answer) {
      var correct, index;
      index = $.inArray(this.currentRegion, this.regions);
      this.regions.splice(index, 1);
      correct = answer === this.currentRegion;
      if (correct) {
        this.numCorrect += 1;
      }
      this.currentRegion = null;
      return correct;
    };

    LocationQuiz.prototype.percentComplete = function() {
      return (1 - this.regions.length / this.regionsCount) * 100;
    };

    LocationQuiz.prototype.status = function() {
      return {
        questionsLeft: this.regions.length,
        questionCount: this.regionsCount,
        numCorrect: this.numCorrect
      };
    };

    return LocationQuiz;

  })();

  MainMenu = (function() {
    var $el, $score;
    $el = $('#main-menu');
    $score = $el.children('#score');
    return {
      init: function(opts) {
        this.onSelectMap = opts.onSelectMap;
        this.onSelectQuiz = opts.onSelectQuiz;
        this.onStartQuiz = opts.onStartQuiz;
        this._createMenu();
        this._bindEvents();
        return this.hideScore();
      },
      show: function() {
        return this.lightbox.show();
      },
      hide: function() {
        return this.lightbox.hide();
      },
      getSelectedMap: function() {
        return $el.find('#map-type .pure-button-active').first().data('map');
      },
      getSelectedQuiz: function() {
        return $el.find('#quiz-type .pure-button-active').first().data('quiz');
      },
      showScore: function(numCorrect, questionCount, elapsedTime) {
        return $score.show().text("" + numCorrect + " out of " + questionCount + " correct in " + (this._formatTimeStr(elapsedTime)));
      },
      hideScore: function(numCorrect) {
        return $score.hide();
      },
      _formatTimeStr: function(milliseconds) {
        var minutes, minutesString, seconds, secondsString;
        seconds = (milliseconds / 1000).toFixed(2);
        minutes = Math.floor(seconds / 60).toString();
        seconds = (seconds % 60).toFixed(2);
        secondsString = seconds === '1.00' ? '1 second' : "" + seconds + " seconds";
        if (minutes === '0') {
          return secondsString;
        } else {
          minutesString = minutes === '1' ? '1 minute' : "" + minutes + " minutes";
          return "" + minutesString + " and " + secondsString;
        }
      },
      _createMenu: function() {
        return this.lightbox != null ? this.lightbox : this.lightbox = new LightBox('main-menu');
      },
      _bindEvents: function() {
        var _this = this;
        $el.find('#start-quiz').click(function() {
          return _this.onStartQuiz();
        });
        $el.find('.pure-control-group .pure-button').click(function(e) {
          var $current, $target;
          $target = $(e.target);
          $current = $target.siblings('.pure-button-active');
          if (!$target.hasClass('pure-button-active')) {
            $current.removeClass('pure-button-active');
            $current = $target.addClass('pure-button-active');
            return $current.trigger('menu_button_click');
          }
        });
        return $el.find('#map-type').on('menu_button_click', function() {
          return _this.onSelectMap(_this.getSelectedMap());
        });
      }
    };
  })();

  Map = (function() {
    var BACKGROUND_COLOR, HIGHLIGHT_ANI_SPEED, HIGHLIGHT_SIZE, MAX_PLANE_COUNT, PLANE_SPEED;

    BACKGROUND_COLOR = '#2980B9';

    HIGHLIGHT_SIZE = 170;

    HIGHLIGHT_ANI_SPEED = 700;

    MAX_PLANE_COUNT = 10;

    PLANE_SPEED = 1.5;

    function Map(containerID, mapName) {
      this.el = $('#' + containerID);
      this.mapName = mapName;
      this._updatePlaneSpeed = $.proxy((function() {
        return this.planeSpeed = this._getPlaneSpeed();
      }), this);
      $(window).resize(this._updatePlaneSpeed);
    }

    Map.prototype.render = function() {
      this._createMap();
      this._updatePlaneSpeed();
      this.flightControl = new FlightControl(this, MAX_PLANE_COUNT);
      return this.flightControl.spawnFlights();
    };

    Map.prototype.destroy = function() {
      this.el.empty();
      this.flightControl.destroyAll();
      return $(window).unbind('resize', this._updatePlaneSpeed);
    };

    Map.prototype.clearSelectedRegions = function() {
      return this.map.clearSelectedRegions();
    };

    Map.prototype.isRegionSelected = function(regionCode) {
      var selected;
      selected = this.map.getSelectedRegions();
      return $.inArray(regionCode, selected) !== -1;
    };

    Map.prototype.selectRegion = function(regionCode, color) {
      this.map.regions[regionCode].element.style.selected.fill = color;
      return this.map.setSelectedRegions(regionCode);
    };

    Map.prototype.codeForRegion = function(regionName) {
      var data, regionCode, _ref;
      _ref = this.map.regions;
      for (regionCode in _ref) {
        data = _ref[regionCode];
        if (data.config.name === regionName) {
          return regionCode;
        }
      }
    };

    Map.prototype.regionForCode = function(regionCode) {
      return this.map.getRegionName(regionCode);
    };

    Map.prototype.getRegions = function() {
      var data, regionCode, _ref, _results;
      _ref = this.map.regions;
      _results = [];
      for (regionCode in _ref) {
        data = _ref[regionCode];
        _results.push(data.config.name);
      }
      return _results;
    };

    Map.prototype.latLngToPoint = function(lat, lng) {
      return this.map.latLngToPoint(lat, lng);
    };

    Map.prototype.bindEvents = function(events) {
      var callback, event, _results;
      this.el.unbind();
      _results = [];
      for (event in events) {
        callback = events[event];
        _results.push(this.el.bind("" + event + ".jvectormap", callback));
      }
      return _results;
    };

    Map.prototype.getRandomLatLng = function() {
      var bBox, i, latLng, maxAttemptsPerRegion, point, _i;
      maxAttemptsPerRegion = 5;
      latLng = null;
      while (true) {
        bBox = this._getRegion().element.node.getBoundingClientRect();
        for (i = _i = 0; _i < maxAttemptsPerRegion; i = _i += 1) {
          point = {
            x: bBox.left + Math.random() * bBox.width,
            y: bBox.top + Math.random() * bBox.height
          };
          latLng = this.map.pointToLatLng(point.x, point.y);
          if (latLng) {
            return latLng;
          }
        }
      }
    };

    Map.prototype.highlightRegion = function(regionCode) {
      var $highlight, bBox, centerLeft, centerTop;
      bBox = this.map.regions[regionCode].element.node.getBoundingClientRect();
      $highlight = $('<div class="region-highlight"><i class="fa fa-circle-o"></i></div>');
      centerLeft = bBox.left + (bBox.width / 2);
      centerTop = bBox.top + (bBox.height / 2);
      return $highlight.css({
        'font-size': "" + HIGHLIGHT_SIZE + "px",
        left: centerLeft - (HIGHLIGHT_SIZE / 2),
        top: centerTop - (HIGHLIGHT_SIZE / 2),
        width: HIGHLIGHT_SIZE,
        height: HIGHLIGHT_SIZE
      }).appendTo(this.el).animate({
        'font-size': 0,
        left: centerLeft,
        top: centerTop,
        width: 0,
        height: 0,
        opacity: 0
      }, HIGHLIGHT_ANI_SPEED, function() {
        return $highlight.remove();
      });
    };

    Map.prototype._getRegion = function(index) {
      if (this.regionKeys == null) {
        this.regionKeys = Object.keys(this.map.regions);
      }
      if (index == null) {
        index = Math.floor(Math.random() * this.regionKeys.length);
      }
      return this.map.regions[this.regionKeys[index]];
    };

    Map.prototype._createMap = function() {
      this.el.vectorMap({
        map: this.mapName,
        backgroundColor: BACKGROUND_COLOR
      });
      return this.map = this.el.vectorMap('get', 'mapObject');
    };

    Map.prototype._getPlaneSpeed = function() {
      var bBox, bottomRight, distLatLng, distPixels, topLeft;
      bBox = this._getRegion(1).element.node.getBoundingClientRect();
      distPixels = Math.sqrt(Math.pow(bBox.width, 2) + Math.pow(bBox.height, 2));
      topLeft = this.map.pointToLatLng(bBox.left, bBox.top);
      bottomRight = this.map.pointToLatLng(bBox.left + bBox.width, bBox.top + bBox.height);
      distLatLng = Math.sqrt(Math.pow(bottomRight.lng - topLeft.lng, 2) + Math.pow(bottomRight.lat - topLeft.lat, 2));
      return PLANE_SPEED / (distPixels / distLatLng);
    };

    return Map;

  })();

  Plane = (function() {
    var PLANE_IMG, PLANE_SIZE;

    PLANE_IMG = 'imgs/airplane_blue.svg';

    PLANE_SIZE = 20;

    function Plane(map, start, end) {
      this.map = map;
      this.end = end;
      this.pos = start;
      this.flightDist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      this.el = $("<img class='plane' src='" + PLANE_IMG + "' />");
      this.map.el.append(this.el);
    }

    Plane.prototype.destroy = function() {
      return this.el.remove();
    };

    Plane.prototype.hasLanded = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return distLeft <= this.map.planeSpeed;
    };

    Plane.prototype.update = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      this.ang = Math.atan2(dy, dx);
      this.pos.lng += Math.cos(this.ang) * this.map.planeSpeed;
      this.pos.lat += Math.sin(this.ang) * this.map.planeSpeed;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return this.amplitude = Math.sin((distLeft / this.flightDist) * Math.PI);
    };

    Plane.prototype.render = function() {
      var curveHeight, curvedLat, curvedLng, facingAng, pos, rotateVal, size;
      size = this.amplitude * (PLANE_SIZE * 2);
      size = size > PLANE_SIZE ? PLANE_SIZE : size;
      curveHeight = this.amplitude * 3;
      curvedLng = this.pos.lng - curveHeight * Math.sin(this.ang);
      curvedLat = this.pos.lat + curveHeight * Math.cos(this.ang);
      pos = this.map.latLngToPoint(curvedLat, curvedLng);
      facingAng = Math.atan2(curvedLat - this.oldLat || this.pos.lat, curvedLng - this.oldLng || this.pos.lng);
      this.oldLng = curvedLng;
      this.oldLat = curvedLat;
      if (pos) {
        rotateVal = "rotate(" + (-facingAng) + "rad)";
        return this.el.show().css({
          left: pos.x,
          top: pos.y,
          width: size,
          height: size,
          '-webkit-transform': rotateVal,
          '-moz-transform': rotateVal,
          '-ms-transform': rotateVal,
          '-o-transform': rotateVal
        });
      } else {
        return this.el.hide();
      }
    };

    return Plane;

  })();

  ProgressBar = (function() {
    var $el;
    $el = $('#progress-bar');
    return {
      show: function() {
        return $el.show();
      },
      hide: function() {
        return $el.hide();
      },
      reset: function() {
        return $el.css('width', 0);
      },
      update: function(percentComplete) {
        return $el.css('width', "" + percentComplete + "%");
      }
    };
  })();

  QuizBox = (function() {
    var $el, $flashBox, $input, ENTER_BUTTON_CODE, FLASH_MESSAGE_TIME, VERT_MARGIN;
    FLASH_MESSAGE_TIME = 1700;
    ENTER_BUTTON_CODE = 13;
    VERT_MARGIN = 10;
    $el = $('#quiz-box');
    $input = $el.find('.quiz-input');
    $flashBox = $el.find('.flash-box');
    return {
      init: function() {
        this.isTop = true;
        $el.css({
          top: VERT_MARGIN
        });
        return this.bindEvents();
      },
      bindEvents: function() {
        $el.children('.skip-question').click(function() {
          return QuizBox.onSkipQuestion();
        });
        $el.children('.main-menu').click(function() {
          return QuizBox.onMenuClick();
        });
        $el.children('.fa-arrow-down').click(function() {
          return QuizBox.toggleVertPosition();
        });
        return $input.keypress(function(e) {
          if (e.which === ENTER_BUTTON_CODE) {
            QuizBox.onInputEnter($input);
            $input.val('');
            return e.preventDefault();
          }
        });
      },
      toggleVertPosition: function() {
        var offset;
        offset = $(window).height() - ($el.outerHeight() + VERT_MARGIN);
        if (offset <= 0) {
          return;
        }
        $el.children('.fa-arrow-down, .fa-arrow-up').toggleClass('fa-arrow-up fa-arrow-down');
        if (this.isTop) {
          $el.animate({
            top: offset
          }, 'swing', function() {
            return $el.css({
              top: '',
              bottom: VERT_MARGIN
            });
          });
        } else {
          $el.animate({
            bottom: offset
          }, 'swing', function() {
            return $el.css({
              bottom: '',
              top: VERT_MARGIN
            });
          });
        }
        return this.isTop = !this.isTop;
      },
      askQuestion: function(question) {
        return $el.children('h3').text(question);
      },
      flashMessage: (function() {
        var timer;
        timer = null;
        return function(msg, msgType) {
          var color;
          if (msgType == null) {
            msgType = 'error';
          }
          clearTimeout(timer);
          color = (function() {
            switch (msgType) {
              case 'error':
                return '#E74C3C';
              case 'warning':
                return '#F39C12';
              default:
                return '#2C3E50';
            }
          })();
          if (this.isTop) {
            $flashBox.css({
              top: '',
              bottom: '-40px'
            });
          } else {
            $flashBox.css({
              top: '-40px',
              bottom: ''
            });
          }
          return $flashBox.css('color', color).text(msg).fadeIn(function() {
            return timer = setTimeout((function() {
              return $flashBox.fadeOut();
            }), FLASH_MESSAGE_TIME);
          });
        };
      })(),
      show: function(showInput) {
        if (showInput == null) {
          showInput = false;
        }
        $el.show();
        if (showInput) {
          return $input.show().focus();
        } else {
          return $input.hide();
        }
      },
      hide: function() {
        return $el.hide();
      },
      onMenuClick: function() {
        throw new Error('Must be overwritten!');
      },
      onSkipQuestion: function() {
        throw new Error('Must be overwritten!');
      },
      onInputEnter: function() {
        throw new Error('Must be overwritten!');
      }
    };
  })();

  REGION_DATA = {
    countries: {
      afghanistan: {
        capital: "Kabul",
        prettyName: "Afghanistan"
      },
      "åland islands": {
        capital: "Mariehamn",
        prettyName: "Åland Islands"
      },
      "aland": {
        capital: "Mariehamn",
        prettyName: "Åland Islands"
      },
      albania: {
        capital: "Tirana",
        prettyName: "Albania"
      },
      algeria: {
        capital: "Algiers",
        prettyName: "Algeria"
      },
      "american samoa": {
        capital: "Pago Pago",
        prettyName: "American Samoa"
      },
      andorra: {
        capital: "Andorra la Vella",
        prettyName: "Andorra"
      },
      angola: {
        capital: "Luanda",
        prettyName: "Angola"
      },
      anguilla: {
        capital: "The Valley",
        prettyName: "Anguilla"
      },
      antarctica: {
        capital: "",
        prettyName: "Antarctica"
      },
      "antigua and barbuda": {
        capital: "Saint John's",
        prettyName: "Antigua and Barbuda"
      },
      argentina: {
        capital: "Buenos Aires",
        prettyName: "Argentina"
      },
      armenia: {
        capital: "Yerevan",
        prettyName: "Armenia"
      },
      aruba: {
        capital: "Oranjestad",
        prettyName: "Aruba"
      },
      australia: {
        capital: "Canberra",
        prettyName: "Australia"
      },
      austria: {
        capital: "Vienna",
        prettyName: "Austria"
      },
      azerbaijan: {
        capital: "Baku",
        prettyName: "Azerbaijan"
      },
      bahamas: {
        capital: "Nassau",
        prettyName: "Bahamas"
      },
      "the bahamas": {
        capital: "Nassau",
        prettyName: "Bahamas"
      },
      bahrain: {
        capital: "Manama",
        prettyName: "Bahrain"
      },
      bangladesh: {
        capital: "Dhaka",
        prettyName: "Bangladesh"
      },
      barbados: {
        capital: "Bridgetown",
        prettyName: "Barbados"
      },
      belarus: {
        capital: "Minsk",
        prettyName: "Belarus"
      },
      belgium: {
        capital: "Brussels",
        prettyName: "Belgium"
      },
      belize: {
        capital: "Belmopan",
        prettyName: "Belize"
      },
      benin: {
        capital: "Porto-Novo",
        prettyName: "Benin"
      },
      bermuda: {
        capital: "Hamilton",
        prettyName: "Bermuda"
      },
      bhutan: {
        capital: "Thimphu",
        prettyName: "Bhutan"
      },
      bolivia: {
        capital: "Sucre",
        prettyName: "Bolivia"
      },
      bonaire: {
        capital: "Kralendijk",
        prettyName: "Bonaire"
      },
      "bosnia and herzegovina": {
        capital: "Sarajevo",
        prettyName: "Bosnia and Herzegovina"
      },
      botswana: {
        capital: "Gaborone",
        prettyName: "Botswana"
      },
      "bouvet island": {
        capital: "",
        prettyName: "Bouvet Island"
      },
      brazil: {
        capital: "Brasilia",
        prettyName: "Brazil"
      },
      "british indian ocean territory": {
        capital: "Diego Garcia",
        prettyName: "British Indian Ocean Territory"
      },
      "british virgin islands": {
        capital: "Road Town",
        prettyName: "British Virgin Islands"
      },
      brunei: {
        capital: "Bandar Seri Begawan",
        prettyName: "Brunei"
      },
      bulgaria: {
        capital: "Sofia",
        prettyName: "Bulgaria"
      },
      "burkina faso": {
        capital: "Ouagadougou",
        prettyName: "Burkina Faso"
      },
      burundi: {
        capital: "Bujumbura",
        prettyName: "Burundi"
      },
      cambodia: {
        capital: "Phnom Penh",
        prettyName: "Cambodia"
      },
      cameroon: {
        capital: "Yaounde",
        prettyName: "Cameroon"
      },
      canada: {
        capital: "Ottawa",
        prettyName: "Canada"
      },
      "cape verde": {
        capital: "Praia",
        prettyName: "Cape Verde"
      },
      "cayman islands": {
        capital: "George Town",
        prettyName: "Cayman Islands"
      },
      "central african republic": {
        capital: "Bangui",
        prettyName: "Central African Republic"
      },
      chad: {
        capital: "N'Djamena",
        prettyName: "Chad"
      },
      chile: {
        capital: "Santiago",
        prettyName: "Chile"
      },
      china: {
        capital: "Beijing",
        prettyName: "China"
      },
      "christmas island": {
        capital: "Flying Fish Cove",
        prettyName: "Christmas Island"
      },
      "cocos (keeling) islands": {
        capital: "West Island",
        prettyName: "Cocos (Keeling) Islands"
      },
      colombia: {
        capital: "Bogota",
        prettyName: "Colombia"
      },
      comoros: {
        capital: "Moroni",
        prettyName: "Comoros"
      },
      "republic of the congo": {
        capital: "Brazzaville",
        prettyName: "Republic of the Congo"
      },
      "democratic republic of the congo": {
        capital: "Kinshasa",
        prettyName: "Democratic Republic of the Congo"
      },
      "cook islands": {
        capital: "Avarua",
        prettyName: "Cook Islands"
      },
      "costa rica": {
        capital: "San Jose",
        prettyName: "Costa Rica"
      },
      "côte d'ivoire": {
        capital: "Yamoussoukro",
        prettyName: "Côte d'Ivoire"
      },
      "ivory coast": {
        capital: "Yamoussoukro",
        prettyName: "Ivory Coast"
      },
      croatia: {
        capital: "Zagreb",
        prettyName: "Croatia"
      },
      cuba: {
        capital: "Havana",
        prettyName: "Cuba"
      },
      "curaçao": {
        capital: "Willemstad",
        prettyName: "Curaçao"
      },
      cyprus: {
        capital: "Nicosia",
        prettyName: "Cyprus"
      },
      "northern cyprus": {
        capital: "North Nicosia",
        prettyName: "Northern Cyprus"
      },
      "czech republic": {
        capital: "Prague",
        prettyName: "Czech Republic"
      },
      denmark: {
        capital: "Copenhagen",
        prettyName: "Denmark"
      },
      djibouti: {
        capital: "Djibouti",
        prettyName: "Djibouti"
      },
      dominica: {
        capital: "Roseau",
        prettyName: "Dominica"
      },
      "dominican republic": {
        capital: "Santo Domingo",
        prettyName: "Dominican Republic"
      },
      ecuador: {
        capital: "Quito",
        prettyName: "Ecuador"
      },
      egypt: {
        capital: "Cairo",
        prettyName: "Egypt"
      },
      "el salvador": {
        capital: "San Salvador",
        prettyName: "El Salvador"
      },
      "equatorial guinea": {
        capital: "Malabo",
        prettyName: "Equatorial Guinea"
      },
      eritrea: {
        capital: "Asmara",
        prettyName: "Eritrea"
      },
      estonia: {
        capital: "Tallinn",
        prettyName: "Estonia"
      },
      ethiopia: {
        capital: "Addis Ababa",
        prettyName: "Ethiopia"
      },
      "falkland islands": {
        capital: "Stanley",
        prettyName: "Falkland Islands"
      },
      "faroe islands": {
        capital: "Torshavn",
        prettyName: "Faroe Islands"
      },
      fiji: {
        capital: "Suva",
        prettyName: "Fiji"
      },
      finland: {
        capital: "Helsinki",
        prettyName: "Finland"
      },
      france: {
        capital: "Paris",
        prettyName: "France"
      },
      "french guiana": {
        capital: "Cayenne",
        prettyName: "French Guiana"
      },
      "french polynesia": {
        capital: "Papeete",
        prettyName: "French Polynesia"
      },
      "french southern and antarctic lands": {
        capital: "Port-aux-Francais",
        prettyName: "French Southern and Antarctic Lands"
      },
      gabon: {
        capital: "Libreville",
        prettyName: "Gabon"
      },
      gambia: {
        capital: "Banjul",
        prettyName: "Gambia"
      },
      georgia: {
        capital: "Tbilisi",
        prettyName: "Georgia"
      },
      germany: {
        capital: "Berlin",
        prettyName: "Germany"
      },
      ghana: {
        capital: "Accra",
        prettyName: "Ghana"
      },
      gibraltar: {
        capital: "Gibraltar",
        prettyName: "Gibraltar"
      },
      greece: {
        capital: "Athens",
        prettyName: "Greece"
      },
      greenland: {
        capital: "Nuuk",
        prettyName: "Greenland"
      },
      grenada: {
        capital: "St. George's",
        prettyName: "Grenada"
      },
      guadeloupe: {
        capital: "Basse-Terre",
        prettyName: "Guadeloupe"
      },
      guam: {
        capital: "Hagatna",
        prettyName: "Guam"
      },
      guatemala: {
        capital: "Guatemala City",
        prettyName: "Guatemala"
      },
      guernsey: {
        capital: "St. Peter Port",
        prettyName: "Guernsey"
      },
      guinea: {
        capital: "Conakry",
        prettyName: "Guinea"
      },
      "guinea-bissau": {
        capital: "Bissau",
        prettyName: "Guinea-Bissau"
      },
      "guinea bissau": {
        capital: "Bissau",
        prettyName: "Guinea-Bissau"
      },
      guyana: {
        capital: "Georgetown",
        prettyName: "Guyana"
      },
      haiti: {
        capital: "Port-au-Prince",
        prettyName: "Haiti"
      },
      "heard island and mcdonald islands": {
        capital: "",
        prettyName: "Heard Island and McDonald Islands"
      },
      "vatican city": {
        capital: "Vatican City",
        prettyName: "Vatican City"
      },
      honduras: {
        capital: "Tegucigalpa",
        prettyName: "Honduras"
      },
      "hong kong": {
        capital: "City of Victoria",
        prettyName: "Hong Kong"
      },
      hungary: {
        capital: "Budapest",
        prettyName: "Hungary"
      },
      iceland: {
        capital: "Reykjavik",
        prettyName: "Iceland"
      },
      india: {
        capital: "New Delhi",
        prettyName: "India"
      },
      indonesia: {
        capital: "Jakarta",
        prettyName: "Indonesia"
      },
      iran: {
        capital: "Tehran",
        prettyName: "Iran"
      },
      iraq: {
        capital: "Baghdad",
        prettyName: "Iraq"
      },
      ireland: {
        capital: "Dublin",
        prettyName: "Ireland"
      },
      "isle of man": {
        capital: "Douglas",
        prettyName: "Isle of Man"
      },
      israel: {
        capital: "Jerusalem",
        prettyName: "Israel"
      },
      italy: {
        capital: "Rome",
        prettyName: "Italy"
      },
      jamaica: {
        capital: "Kingston",
        prettyName: "Jamaica"
      },
      japan: {
        capital: "Tokyo",
        prettyName: "Japan"
      },
      jersey: {
        capital: "Saint Helier",
        prettyName: "Jersey"
      },
      jordan: {
        capital: "Amman",
        prettyName: "Jordan"
      },
      kazakhstan: {
        capital: "Astana",
        prettyName: "Kazakhstan"
      },
      kenya: {
        capital: "Nairobi",
        prettyName: "Kenya"
      },
      kiribati: {
        capital: "South Tarawa",
        prettyName: "Kiribati"
      },
      "kosovo": {
        capital: "Pristina",
        prettyName: "Kosovo"
      },
      kuwait: {
        capital: "Kuwait City",
        prettyName: "Kuwait"
      },
      kyrgyzstan: {
        capital: "Bishkek",
        prettyName: "Kyrgyzstan"
      },
      laos: {
        capital: "Vientiane",
        prettyName: "Laos"
      },
      latvia: {
        capital: "Riga",
        prettyName: "Latvia"
      },
      lebanon: {
        capital: "Beirut",
        prettyName: "Lebanon"
      },
      lesotho: {
        capital: "Maseru",
        prettyName: "Lesotho"
      },
      liberia: {
        capital: "Monrovia",
        prettyName: "Liberia"
      },
      libya: {
        capital: "Tripoli",
        prettyName: "Libya"
      },
      liechtenstein: {
        capital: "Vaduz",
        prettyName: "Liechtenstein"
      },
      lithuania: {
        capital: "Vilnius",
        prettyName: "Lithuania"
      },
      luxembourg: {
        capital: "Luxembourg",
        prettyName: "Luxembourg"
      },
      macao: {
        capital: "",
        prettyName: "Macao"
      },
      macedonia: {
        capital: "Skopje",
        prettyName: "Macedonia"
      },
      madagascar: {
        capital: "Antananarivo",
        prettyName: "Madagascar"
      },
      malawi: {
        capital: "Lilongwe",
        prettyName: "Malawi"
      },
      malaysia: {
        capital: "Kuala Lumpur",
        prettyName: "Malaysia"
      },
      maldives: {
        capital: "Male",
        prettyName: "Maldives"
      },
      mali: {
        capital: "Bamako",
        prettyName: "Mali"
      },
      malta: {
        capital: "Valletta",
        prettyName: "Malta"
      },
      "marshall islands": {
        capital: "Majuro",
        prettyName: "Marshall Islands"
      },
      martinique: {
        capital: "Fort-de-France",
        prettyName: "Martinique"
      },
      mauritania: {
        capital: "Nouakchott",
        prettyName: "Mauritania"
      },
      mauritius: {
        capital: "Port Louis",
        prettyName: "Mauritius"
      },
      mayotte: {
        capital: "Mamoudzou",
        prettyName: "Mayotte"
      },
      mexico: {
        capital: "Mexico City",
        prettyName: "Mexico"
      },
      micronesia: {
        capital: "Palikir",
        prettyName: "Micronesia"
      },
      moldova: {
        capital: "Chisinau",
        prettyName: "Moldova"
      },
      monaco: {
        capital: "Monaco",
        prettyName: "Monaco"
      },
      mongolia: {
        capital: "Ulan Bator",
        prettyName: "Mongolia"
      },
      montenegro: {
        capital: "Podgorica",
        prettyName: "Montenegro"
      },
      montserrat: {
        capital: "Plymouth",
        prettyName: "Montserrat"
      },
      morocco: {
        capital: "Rabat",
        prettyName: "Morocco"
      },
      mozambique: {
        capital: "Maputo",
        prettyName: "Mozambique"
      },
      myanmar: {
        capital: "Naypyidaw",
        prettyName: "Myanmar"
      },
      namibia: {
        capital: "Windhoek",
        prettyName: "Namibia"
      },
      nauru: {
        capital: "Yaren",
        prettyName: "Nauru"
      },
      nepal: {
        capital: "Kathmandu",
        prettyName: "Nepal"
      },
      netherlands: {
        capital: "Amsterdam",
        prettyName: "Netherlands"
      },
      "new caledonia": {
        capital: "Noumea",
        prettyName: "New Caledonia"
      },
      "new zealand": {
        capital: "Wellington",
        prettyName: "New Zealand"
      },
      nicaragua: {
        capital: "Managua",
        prettyName: "Nicaragua"
      },
      niger: {
        capital: "Niamey",
        prettyName: "Niger"
      },
      nigeria: {
        capital: "Abuja",
        prettyName: "Nigeria"
      },
      niue: {
        capital: "Alofi",
        prettyName: "Niue"
      },
      "norfolk island": {
        capital: "Kingston",
        prettyName: "Norfolk Island"
      },
      "north korea": {
        capital: "Pyongyang",
        prettyName: "North Korea"
      },
      "northern mariana islands": {
        capital: "Saipan",
        prettyName: "Northern Mariana Islands"
      },
      norway: {
        capital: "Oslo",
        prettyName: "Norway"
      },
      oman: {
        capital: "Muscat",
        prettyName: "Oman"
      },
      pakistan: {
        capital: "Islamabad",
        prettyName: "Pakistan"
      },
      palau: {
        capital: "Ngerulmud",
        prettyName: "Palau"
      },
      palestine: {
        capital: "Ramallah",
        prettyName: "Palestine"
      },
      panama: {
        capital: "Panama City",
        prettyName: "Panama"
      },
      "papua new guinea": {
        capital: "Port Moresby",
        prettyName: "Papua New Guinea"
      },
      paraguay: {
        capital: "Asuncion",
        prettyName: "Paraguay"
      },
      peru: {
        capital: "Lima",
        prettyName: "Peru"
      },
      philippines: {
        capital: "Manila",
        prettyName: "Philippines"
      },
      "pitcairn islands": {
        capital: "Adamstown",
        prettyName: "Pitcairn Islands"
      },
      poland: {
        capital: "Warsaw",
        prettyName: "Poland"
      },
      portugal: {
        capital: "Lisbon",
        prettyName: "Portugal"
      },
      "puerto rico": {
        capital: "San Juan",
        prettyName: "Puerto Rico"
      },
      qatar: {
        capital: "Doha",
        prettyName: "Qatar"
      },
      "réunion": {
        capital: "Saint-Denis",
        prettyName: "Réunion"
      },
      romania: {
        capital: "Bucharest",
        prettyName: "Romania"
      },
      russia: {
        capital: "Moscow",
        prettyName: "Russia"
      },
      rwanda: {
        capital: "Kigali",
        prettyName: "Rwanda"
      },
      "saint barthélemy": {
        capital: "Gustavia",
        prettyName: "Saint Barthélemy"
      },
      "saint helena": {
        capital: "Jamestown",
        prettyName: "Saint Helena"
      },
      "saint kitts and nevis": {
        capital: "Basseterre",
        prettyName: "Saint Kitts and Nevis"
      },
      "saint lucia": {
        capital: "Castries",
        prettyName: "Saint Lucia"
      },
      "saint martin": {
        capital: "Marigot",
        prettyName: "Saint Martin"
      },
      "saint pierre and miquelon": {
        capital: "Saint-Pierre",
        prettyName: "Saint Pierre and Miquelon"
      },
      "saint vincent and the grenadines": {
        capital: "Kingstown",
        prettyName: "Saint Vincent and the Grenadines"
      },
      samoa: {
        capital: "Apia",
        prettyName: "Samoa"
      },
      "san marino": {
        capital: "City of San Marino",
        prettyName: "San Marino"
      },
      "são tomé and príncipe": {
        capital: "Sao Tome",
        prettyName: "São Tomé and Príncipe"
      },
      "saudi arabia": {
        capital: "Riyadh",
        prettyName: "Saudi Arabia"
      },
      senegal: {
        capital: "Dakar",
        prettyName: "Senegal"
      },
      serbia: {
        capital: "Belgrade",
        prettyName: "Serbia"
      },
      "republic of serbia": {
        capital: "Belgrade",
        prettyName: "Republic of Republic of Serbia"
      },
      seychelles: {
        capital: "Victoria",
        prettyName: "Seychelles"
      },
      "sierra leone": {
        capital: "Freetown",
        prettyName: "Sierra Leone"
      },
      singapore: {
        capital: "Singapore",
        prettyName: "Singapore"
      },
      "sint maarten": {
        capital: "Philipsburg",
        prettyName: "Sint Maarten"
      },
      slovakia: {
        capital: "Bratislava",
        prettyName: "Slovakia"
      },
      slovenia: {
        capital: "Ljubljana",
        prettyName: "Slovenia"
      },
      "solomon islands": {
        capital: "Honiara",
        prettyName: "Solomon Islands"
      },
      somalia: {
        capital: "Mogadishu",
        prettyName: "Somalia"
      },
      "somaliland": {
        capital: "Hargeisa",
        prettyName: "Somaliland"
      },
      "south africa": {
        capital: "Cape Town",
        prettyName: "South Africa"
      },
      "south georgia": {
        capital: "King Edward Point",
        prettyName: "South Georgia"
      },
      "south korea": {
        capital: "Seoul",
        prettyName: "South Korea"
      },
      "south sudan": {
        capital: "Juba",
        prettyName: "South Sudan"
      },
      spain: {
        capital: "Madrid",
        prettyName: "Spain"
      },
      "sri lanka": {
        capital: "Colombo",
        prettyName: "Sri Lanka"
      },
      sudan: {
        capital: "Khartoum",
        prettyName: "Sudan"
      },
      suriname: {
        capital: "Paramaribo",
        prettyName: "Suriname"
      },
      "svalbard and jan mayen": {
        capital: "Longyearbyen",
        prettyName: "Svalbard and Jan Mayen"
      },
      swaziland: {
        capital: "Lobamba",
        prettyName: "Swaziland"
      },
      sweden: {
        capital: "Stockholm",
        prettyName: "Sweden"
      },
      switzerland: {
        capital: "Bern",
        prettyName: "Switzerland"
      },
      syria: {
        capital: "Damascus",
        prettyName: "Syria"
      },
      taiwan: {
        capital: "Taipei",
        prettyName: "Taiwan"
      },
      tajikistan: {
        capital: "Dushanbe",
        prettyName: "Tajikistan"
      },
      tanzania: {
        capital: "Dodoma",
        prettyName: "Tanzania"
      },
      thailand: {
        capital: "Bangkok",
        prettyName: "Thailand"
      },
      "timor-leste": {
        capital: "Dili",
        prettyName: "Timor-Leste"
      },
      "east timor": {
        capital: "Dili",
        prettyName: "East Timor"
      },
      togo: {
        capital: "Lome",
        prettyName: "Togo"
      },
      tokelau: {
        capital: "Fakaofo",
        prettyName: "Tokelau"
      },
      tonga: {
        capital: "Nuku'alofa",
        prettyName: "Tonga"
      },
      "trinidad and tobago": {
        capital: "Port of Spain",
        prettyName: "Trinidad and Tobago"
      },
      tunisia: {
        capital: "Tunis",
        prettyName: "Tunisia"
      },
      turkey: {
        capital: "Ankara",
        prettyName: "Turkey"
      },
      turkmenistan: {
        capital: "Ashgabat",
        prettyName: "Turkmenistan"
      },
      "turks and caicos islands": {
        capital: "Cockburn Town",
        prettyName: "Turks and Caicos Islands"
      },
      tuvalu: {
        capital: "Funafuti",
        prettyName: "Tuvalu"
      },
      uganda: {
        capital: "Kampala",
        prettyName: "Uganda"
      },
      ukraine: {
        capital: "Kiev",
        prettyName: "Ukraine"
      },
      "united arab emirates": {
        capital: "Abu Dhabi",
        prettyName: "United Arab Emirates"
      },
      "united kingdom": {
        capital: "London",
        prettyName: "United Kingdom"
      },
      "united states": {
        capital: "Washington D.C.",
        prettyName: "United States"
      },
      "united states of america": {
        capital: "Washington D.C.",
        prettyName: "United States"
      },
      "united states minor outlying islands": {
        capital: "",
        prettyName: "United States Minor Outlying Islands"
      },
      "united states virgin islands": {
        capital: "Charlotte Amalie",
        prettyName: "United States Virgin Islands"
      },
      uruguay: {
        capital: "Montevideo",
        prettyName: "Uruguay"
      },
      uzbekistan: {
        capital: "Tashkent",
        prettyName: "Uzbekistan"
      },
      vanuatu: {
        capital: "Port Vila",
        prettyName: "Vanuatu"
      },
      venezuela: {
        capital: "Caracas",
        prettyName: "Venezuela"
      },
      vietnam: {
        capital: "Hanoi",
        prettyName: "Vietnam"
      },
      "wallis and futuna": {
        capital: "Mata-Utu",
        prettyName: "Wallis and Futuna"
      },
      "western sahara": {
        capital: "El Aaiun",
        prettyName: "Western Sahara"
      },
      "west bank": {
        capital: "Ramallah",
        prettyName: "West Bank"
      },
      yemen: {
        capital: "Sana'a",
        prettyName: "Yemen"
      },
      zambia: {
        capital: "Lusaka",
        prettyName: "Zambia"
      },
      zimbabwe: {
        capital: "Harare",
        prettyName: "Zimbabwe"
      }
    },
    usStates: {
      maine: {
        capital: "Augusta",
        prettyName: "Maine"
      },
      massachusetts: {
        capital: "Boston",
        prettyName: "Massachusetts"
      },
      "rhode island": {
        capital: "Providence",
        prettyName: "Rhode Island"
      },
      "new hampshire": {
        capital: "Concord",
        prettyName: "New Hampshire"
      },
      vermont: {
        capital: "Montpelier",
        prettyName: "Vermont"
      },
      connecticut: {
        capital: "Hartford",
        prettyName: "Connecticut"
      },
      "new york": {
        capital: "Albany",
        prettyName: "New York"
      },
      "new jersey": {
        capital: "Trenton",
        prettyName: "New Jersey"
      },
      delaware: {
        capital: "Dover",
        prettyName: "Delaware"
      },
      maryland: {
        capital: "Annapolis",
        prettyName: "Maryland"
      },
      pennsylvania: {
        capital: "Harrisburg",
        prettyName: "Pennsylvania"
      },
      virginia: {
        capital: "Richmond",
        prettyName: "Virginia"
      },
      "north carolina": {
        capital: "Raleigh",
        prettyName: "North Carolina"
      },
      "south carolina": {
        capital: "Columbia",
        prettyName: "South Carolina"
      },
      "west virginia": {
        capital: "Charleston",
        prettyName: "West Virginia"
      },
      ohio: {
        capital: "Columbus",
        prettyName: "Ohio"
      },
      florida: {
        capital: "Tallahassee",
        prettyName: "Florida"
      },
      georgia: {
        capital: "Atlanta",
        prettyName: "Georgia"
      },
      michigan: {
        capital: "Lansing",
        prettyName: "Michigan"
      },
      kentucky: {
        capital: "Frankfort",
        prettyName: "Kentucky"
      },
      indiana: {
        capital: "Indianapolis",
        prettyName: "Indiana"
      },
      alabama: {
        capital: "Montgomery",
        prettyName: "Alabama"
      },
      tennessee: {
        capital: "Nashville",
        prettyName: "Tennessee"
      },
      wisconsin: {
        capital: "Madison",
        prettyName: "Wisconsin"
      },
      illinois: {
        capital: "Springfield",
        prettyName: "Illinois"
      },
      mississippi: {
        capital: "Jackson",
        prettyName: "Mississippi"
      },
      louisiana: {
        capital: "Baton Rouge",
        prettyName: "Louisiana"
      },
      missouri: {
        capital: "Jefferson City",
        prettyName: "Missouri"
      },
      arkansas: {
        capital: "Little Rock",
        prettyName: "Arkansas"
      },
      minnesota: {
        capital: "Saint Paul",
        prettyName: "Minnesota"
      },
      iowa: {
        capital: "Des Moines",
        prettyName: "Iowa"
      },
      kansas: {
        capital: "Topeka",
        prettyName: "Kansas"
      },
      nebraska: {
        capital: "Lincoln",
        prettyName: "Nebraska"
      },
      oklahoma: {
        capital: "Oklahoma City",
        prettyName: "Oklahoma"
      },
      texas: {
        capital: "Austin",
        prettyName: "Texas"
      },
      "south dakota": {
        capital: "Pierre",
        prettyName: "South Dakota"
      },
      "north dakota": {
        capital: "Bismarck",
        prettyName: "North Dakota"
      },
      wyoming: {
        capital: "Cheyenne",
        prettyName: "Wyoming"
      },
      colorado: {
        capital: "Denver",
        prettyName: "Colorado"
      },
      "new mexico": {
        capital: "Santa Fe",
        prettyName: "New Mexico"
      },
      utah: {
        capital: "Salt Lake City",
        prettyName: "Utah"
      },
      montana: {
        capital: "Helena",
        prettyName: "Montana"
      },
      arizona: {
        capital: "Phoenix",
        prettyName: "Arizona"
      },
      idaho: {
        capital: "Boise",
        prettyName: "Idaho"
      },
      nevada: {
        capital: "Carson City",
        prettyName: "Nevada"
      },
      california: {
        capital: "Sacramento",
        prettyName: "California"
      },
      washington: {
        capital: "Olympia",
        prettyName: "Washington"
      },
      oregon: {
        capital: "Salem",
        prettyName: "Oregon"
      },
      alaska: {
        capital: "Juneau",
        prettyName: "Alaska"
      },
      hawaii: {
        capital: "Honolulu",
        prettyName: "Hawaii"
      }
    }
  };

}).call(this);
