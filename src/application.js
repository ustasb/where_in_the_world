// Generated by CoffeeScript 1.6.3
(function() {
  var FlightControl, LightBox, LocationQuiz, MainMenu, Map, Plane, ProgressBar, QuizBox;

  window.App = (function() {
    var CORRECT_REGION_COLOR, INCORRECT_REGION_COLOR, MAP_CONTAINER_ID;

    MAP_CONTAINER_ID = 'map-container';

    CORRECT_REGION_COLOR = '#2ECC71';

    INCORRECT_REGION_COLOR = '#E74C3C';

    function App() {
      var _this = this;
      QuizBox.init();
      QuizBox.onMenuClick = function() {
        return _this._showMainMenuView();
      };
      MainMenu.init({
        onSelectMap: function(mapName) {
          return _this._renderMap(mapName);
        },
        onStartQuiz: function() {
          return _this._startQuiz();
        }
      });
      this._showMainMenuView();
      this._renderMap(MainMenu.getSelectedMap());
    }

    App.prototype._showMainMenuView = function() {
      ProgressBar.hide();
      QuizBox.hide();
      return MainMenu.show();
    };

    App.prototype._showQuizView = function() {
      MainMenu.hide();
      QuizBox.show();
      return ProgressBar.show();
    };

    App.prototype._startQuiz = function() {
      this.map.clearSelectedRegions();
      ProgressBar.reset();
      MainMenu.hideScore();
      this._initLocationQuiz();
      this._showQuizView();
      return this.quizStartTime = (new Date).getTime();
    };

    App.prototype._endQuiz = function(numCorrect, questionCount) {
      var elapsedTime;
      elapsedTime = (new Date).getTime() - this.quizStartTime;
      this._showMainMenuView();
      return MainMenu.showScore(numCorrect, questionCount, elapsedTime);
    };

    App.prototype._renderMap = function(mapName) {
      if (this.map) {
        this.map.destroy();
      }
      this.map = new Map(MAP_CONTAINER_ID, mapName);
      return this.map.render();
    };

    App.prototype._initLocationQuiz = function() {
      var quiz,
        _this = this;
      quiz = new LocationQuiz(this.map.getRegions());
      QuizBox.askQuestion(quiz.getQuestion());
      QuizBox.onSkipQuestion = function() {
        return QuizBox.askQuestion(quiz.getQuestion());
      };
      return this.map.bindEvents({
        regionLabelShow: function(e, label, code) {
          return _this.map.isRegionSelected(code);
        },
        regionClick: function(e, regionCode) {
          var askedRegion, clickedRegion, nextQuestion, status;
          clickedRegion = _this.map.regionForCode(regionCode);
          askedRegion = quiz.currentRegion;
          if (quiz.answerQuestion(clickedRegion)) {
            _this.map.selectRegion(regionCode, CORRECT_REGION_COLOR);
          } else {
            _this.map.selectRegion(_this.map.codeForRegion(askedRegion), INCORRECT_REGION_COLOR);
          }
          ProgressBar.update(quiz.percentComplete());
          if (nextQuestion = quiz.getQuestion()) {
            return QuizBox.askQuestion(nextQuestion);
          } else {
            status = quiz.status();
            return _this._endQuiz(status.numCorrect, status.questionCount);
          }
        }
      });
    };

    return App;

  })();

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  FlightControl = (function() {
    var MIN_FLIGHT_DIST;

    MIN_FLIGHT_DIST = 10;

    function FlightControl(map, maxPlaneCount, planeSpeed) {
      this.map = map;
      this.maxPlaneCount = maxPlaneCount;
      this.planeSpeed = planeSpeed;
      this.planes = [];
      this.halted = false;
    }

    FlightControl.prototype.destroyAll = function() {
      var plane, _i, _len, _ref, _results;
      _ref = this.planes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
        plane = _ref[_i];
        _results.push(plane.destroy());
      }
      return _results;
    };

    FlightControl.prototype.haltFlights = function() {
      return this.halted = true;
    };

    FlightControl.prototype.spawnFlights = function() {
      var animate,
        _this = this;
      this.halted = false;
      animate = function() {
        if (!_this.halted) {
          _this._spawnPlanes();
          _this._animatePlanes();
          return requestAnimationFrame(function() {
            return animate();
          });
        }
      };
      return animate();
    };

    FlightControl.prototype._createFlight = function() {
      var dist, end, start;
      dist = 0;
      start = this.map.getRandomLatLng();
      while (!(dist >= MIN_FLIGHT_DIST)) {
        end = this.map.getRandomLatLng();
        dist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      }
      return {
        start: start,
        end: end
      };
    };

    FlightControl.prototype._spawnPlanes = function() {
      var flight, _results;
      _results = [];
      while (!(this.planes.length >= this.maxPlaneCount)) {
        flight = this._createFlight();
        _results.push(this.planes.push(new Plane(this.map, flight.start, flight.end, this.planeSpeed)));
      }
      return _results;
    };

    FlightControl.prototype._animatePlanes = function() {
      var i, plane, _results;
      i = this.planes.length;
      _results = [];
      while (i--) {
        plane = this.planes[i];
        if (plane.hasLanded()) {
          plane.destroy();
          _results.push(this.planes.splice(i, 1));
        } else {
          plane.update();
          _results.push(plane.render());
        }
      }
      return _results;
    };

    return FlightControl;

  })();

  LightBox = (function() {
    var $backdrop;

    $backdrop = $('<div class="light-box-bg"></div>');

    LightBox.showBackdrop = function() {
      return $(document.body).append($backdrop);
    };

    LightBox.hideBackdrop = function() {
      return $backdrop.remove();
    };

    function LightBox(containerID) {
      this.el = $('#' + containerID);
      this._centerInWindow();
      this.show();
      this._bindEvents();
    }

    LightBox.prototype.hide = function() {
      LightBox.hideBackdrop();
      return this.el.hide();
    };

    LightBox.prototype.show = function() {
      LightBox.showBackdrop();
      return this.el.show();
    };

    LightBox.prototype._bindEvents = function() {
      var _this = this;
      return $(window).resize(function() {
        return _this._centerInWindow();
      });
    };

    LightBox.prototype._centerInWindow = function() {
      var $window, verticalOffset;
      $window = $(window);
      verticalOffset = 50;
      return this.el.css({
        left: ($window.width() - this.el.width()) / 2,
        top: (($window.height() - this.el.height()) / 2) - verticalOffset
      });
    };

    return LightBox;

  })();

  LocationQuiz = (function() {
    function LocationQuiz(regions) {
      this.regions = regions;
      this.regionsCount = regions.length;
      this.currentRegion = null;
      this.numCorrect = 0;
    }

    LocationQuiz.prototype.getQuestion = function() {
      var randomIndex;
      if (this.regions.length === 0) {
        return null;
      } else {
        randomIndex = Math.floor(Math.random() * this.regions.length);
        this.currentRegion = this.regions[randomIndex];
        return "Where is " + this.currentRegion + "?";
      }
    };

    LocationQuiz.prototype.answerQuestion = function(answer) {
      var correct, index;
      index = $.inArray(this.currentRegion, this.regions);
      this.regions.splice(index, 1);
      correct = answer === this.currentRegion;
      if (correct) {
        this.numCorrect += 1;
      }
      this.currentRegion = null;
      return correct;
    };

    LocationQuiz.prototype.percentComplete = function() {
      return (1 - this.regions.length / this.regionsCount) * 100;
    };

    LocationQuiz.prototype.status = function() {
      return {
        questionsLeft: this.regions.length,
        questionCount: this.regionsCount,
        numCorrect: this.numCorrect
      };
    };

    return LocationQuiz;

  })();

  Map = (function() {
    var BACKGROUND_COLOR, MAX_PLANE_COUNT, PLANE_SPEED;

    BACKGROUND_COLOR = '#2980B9';

    MAX_PLANE_COUNT = 10;

    PLANE_SPEED = 1.5;

    Map.loadMap = (function() {
      var loaded;
      loaded = {};
      return function(mapName, callback) {
        if (loaded[mapName]) {
          return callback();
        } else {
          return $.get("vendor/jvectormap/maps/" + mapName + ".js", function(loadScript) {
            eval(loadScript);
            loaded[mapName] = true;
            return callback();
          });
        }
      };
    })();

    function Map(containerID, mapName) {
      this.el = $('#' + containerID);
      this.mapName = mapName;
      this._updatePlaneSpeed = $.proxy((function() {
        return this.planeSpeed = this._getPlaneSpeed();
      }), this);
      $(window).resize(this._updatePlaneSpeed);
    }

    Map.prototype.render = function() {
      var _this = this;
      return Map.loadMap(this.mapName, function() {
        _this._createMap();
        _this._updatePlaneSpeed();
        _this.flightControl = new FlightControl(_this, MAX_PLANE_COUNT);
        return _this.flightControl.spawnFlights();
      });
    };

    Map.prototype.destroy = function() {
      this.el.empty();
      this.flightControl.haltFlights();
      this.flightControl.destroyAll();
      return $(window).unbind('resize', this._updatePlaneSpeed);
    };

    Map.prototype.clearSelectedRegions = function() {
      return this.map.clearSelectedRegions();
    };

    Map.prototype.isRegionSelected = function(regionCode) {
      var selected;
      selected = this.map.getSelectedRegions();
      return $.inArray(regionCode, selected) !== -1;
    };

    Map.prototype.selectRegion = function(regionCode, color) {
      this.map.regions[regionCode].element.style.selected.fill = color;
      return this.map.setSelectedRegions(regionCode);
    };

    Map.prototype.codeForRegion = function(regionName) {
      var data, regionCode, _ref;
      _ref = this.map.regions;
      for (regionCode in _ref) {
        data = _ref[regionCode];
        if (data.config.name === regionName) {
          return regionCode;
        }
      }
    };

    Map.prototype.regionForCode = function(regionCode) {
      return this.map.getRegionName(regionCode);
    };

    Map.prototype.getRegions = function() {
      var data, regionCode, _ref, _results;
      _ref = this.map.regions;
      _results = [];
      for (regionCode in _ref) {
        data = _ref[regionCode];
        _results.push(data.config.name);
      }
      return _results;
    };

    Map.prototype.latLngToPoint = function(lat, lng) {
      return this.map.latLngToPoint(lat, lng);
    };

    Map.prototype.bindEvents = function(events) {
      var callback, event, _results;
      this.el.unbind();
      _results = [];
      for (event in events) {
        callback = events[event];
        _results.push(this.el.bind("" + event + ".jvectormap", callback));
      }
      return _results;
    };

    Map.prototype.getRandomLatLng = function() {
      var bBox, i, latLng, maxAttemptsPerRegion, point, _i;
      maxAttemptsPerRegion = 5;
      latLng = null;
      while (true) {
        bBox = this._getRegion().element.node.getBoundingClientRect();
        for (i = _i = 0; _i < maxAttemptsPerRegion; i = _i += 1) {
          point = {
            x: bBox.left + Math.random() * bBox.width,
            y: bBox.top + Math.random() * bBox.height
          };
          latLng = this.map.pointToLatLng(point.x, point.y);
          if (latLng) {
            return latLng;
          }
        }
      }
    };

    Map.prototype._getRegion = function(index) {
      if (this.regionKeys == null) {
        this.regionKeys = Object.keys(this.map.regions);
      }
      if (index == null) {
        index = Math.floor(Math.random() * this.regionKeys.length);
      }
      return this.map.regions[this.regionKeys[index]];
    };

    Map.prototype._createMap = function() {
      this.el.vectorMap({
        map: this.mapName,
        backgroundColor: BACKGROUND_COLOR
      });
      return this.map = this.el.vectorMap('get', 'mapObject');
    };

    Map.prototype._getPlaneSpeed = function() {
      var bBox, bottomRight, distLatLng, distPixels, topLeft;
      bBox = this._getRegion(1).element.node.getBoundingClientRect();
      distPixels = Math.sqrt(Math.pow(bBox.width, 2) + Math.pow(bBox.height, 2));
      topLeft = this.map.pointToLatLng(bBox.left, bBox.top);
      bottomRight = this.map.pointToLatLng(bBox.left + bBox.width, bBox.top + bBox.height);
      distLatLng = Math.sqrt(Math.pow(bottomRight.lng - topLeft.lng, 2) + Math.pow(bottomRight.lat - topLeft.lat, 2));
      return PLANE_SPEED / (distPixels / distLatLng);
    };

    return Map;

  })();

  MainMenu = (function() {
    var $el, $score;
    $el = $('#main-menu');
    $score = $el.children('#score');
    return {
      init: function(opts) {
        this.onSelectMap = opts.onSelectMap;
        this.onStartQuiz = opts.onStartQuiz;
        this._createMenu();
        this._bindEvents();
        return this.hideScore();
      },
      show: function() {
        return this.lightbox.show();
      },
      hide: function() {
        return this.lightbox.hide();
      },
      getSelectedMap: function() {
        return $el.find('#map-type .pure-button-active').first().data('map');
      },
      showScore: function(numCorrect, questionCount, elapsedTime) {
        return $score.show().text("" + numCorrect + " out of " + questionCount + " correct in " + (this._formatTimeStr(elapsedTime)));
      },
      hideScore: function(numCorrect) {
        return $score.hide();
      },
      _formatTimeStr: function(milliseconds) {
        var minutes, minutesString, seconds, secondsString;
        seconds = (milliseconds / 1000).toFixed(2);
        minutes = Math.floor(seconds / 60).toString();
        seconds = (seconds % 60).toFixed(2);
        secondsString = seconds === '1.00' ? '1 second' : "" + seconds + " seconds";
        if (minutes === '0') {
          return secondsString;
        } else {
          minutesString = minutes === '1' ? '1 minute' : "" + minutes + " minutes";
          return "" + minutesString + " and " + secondsString;
        }
      },
      _createMenu: function() {
        return this.lightbox = new LightBox('main-menu');
      },
      _bindEvents: function() {
        var _this = this;
        $el.find('#start-quiz').click(function() {
          return _this.onStartQuiz();
        });
        return $el.find('#map-type .pure-button').click((function() {
          var $active;
          $active = $('#map-type .pure-button-active');
          return function(e) {
            var $target;
            $target = $(e.target);
            if (!$target.hasClass('pure-button-active')) {
              $active.removeClass('pure-button-active');
              $active = $(e.target).addClass('pure-button-active');
              return _this.onSelectMap(_this.getSelectedMap());
            }
          };
        })());
      }
    };
  })();

  Plane = (function() {
    var PLANE_IMG, PLANE_SIZE;

    PLANE_IMG = 'imgs/airplane_blue.svg';

    PLANE_SIZE = 20;

    function Plane(map, start, end) {
      this.map = map;
      this.end = end;
      this.pos = start;
      this.flightDist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      this.el = $("<img class='plane' src='" + PLANE_IMG + "' />");
      this.map.el.append(this.el);
    }

    Plane.prototype.destroy = function() {
      return this.el.remove();
    };

    Plane.prototype.hasLanded = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return distLeft <= this.map.planeSpeed;
    };

    Plane.prototype.update = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      this.ang = Math.atan2(dy, dx);
      this.pos.lng += Math.cos(this.ang) * this.map.planeSpeed;
      this.pos.lat += Math.sin(this.ang) * this.map.planeSpeed;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return this.amplitude = Math.sin((distLeft / this.flightDist) * Math.PI);
    };

    Plane.prototype.render = function() {
      var curveHeight, curvedLat, curvedLng, facingAng, pos, rotateVal, size;
      size = this.amplitude * (PLANE_SIZE * 2);
      size = size > PLANE_SIZE ? PLANE_SIZE : size;
      curveHeight = this.amplitude * 3;
      curvedLng = this.pos.lng - curveHeight * Math.sin(this.ang);
      curvedLat = this.pos.lat + curveHeight * Math.cos(this.ang);
      pos = this.map.latLngToPoint(curvedLat, curvedLng);
      facingAng = Math.atan2(curvedLat - this.oldLat || this.pos.lat, curvedLng - this.oldLng || this.pos.lng);
      this.oldLng = curvedLng;
      this.oldLat = curvedLat;
      if (pos) {
        rotateVal = "rotate(" + (-facingAng) + "rad)";
        return this.el.show().css({
          left: pos.x,
          top: pos.y,
          width: size,
          height: size,
          '-webkit-transform': rotateVal,
          '-moz-transform': rotateVal,
          '-ms-transform': rotateVal,
          '-o-transform': rotateVal
        });
      } else {
        return this.el.hide();
      }
    };

    return Plane;

  })();

  ProgressBar = (function() {
    var $el;
    $el = $('#progress-bar');
    return {
      show: function() {
        return $el.show();
      },
      hide: function() {
        return $el.hide();
      },
      reset: function() {
        return $el.css('width', 0);
      },
      update: function(percentComplete) {
        return $el.css('width', "" + percentComplete + "%");
      }
    };
  })();

  QuizBox = (function() {
    var $el, VERT_MARGIN;
    VERT_MARGIN = 10;
    $el = $('#quiz-box');
    return {
      init: function() {
        this.isTop = true;
        $el.css({
          top: VERT_MARGIN
        });
        return this.bindEvents();
      },
      bindEvents: function() {
        $el.children('.skip-question').click(function() {
          return QuizBox.onSkipQuestion();
        });
        $el.children('.main-menu').click(function() {
          return QuizBox.onMenuClick();
        });
        return $el.children('.fa-arrow-down').click(function() {
          return QuizBox.toggleVertPosition();
        });
      },
      toggleVertPosition: function() {
        var offset;
        offset = $(window).height() - ($el.outerHeight() + VERT_MARGIN);
        if (offset <= 0) {
          return;
        }
        $el.children('.fa-arrow-down, .fa-arrow-up').toggleClass('fa-arrow-up fa-arrow-down');
        if (this.isTop) {
          $el.animate({
            top: offset
          }, 'swing', function() {
            return $el.css({
              top: '',
              bottom: VERT_MARGIN
            });
          });
        } else {
          $el.animate({
            bottom: offset
          }, 'swing', function() {
            return $el.css({
              bottom: '',
              top: VERT_MARGIN
            });
          });
        }
        return this.isTop = !this.isTop;
      },
      askQuestion: function(question) {
        return $el.children('h3').text(question);
      },
      show: function() {
        return $el.show();
      },
      hide: function() {
        return $el.hide();
      },
      onMenuClick: function() {
        throw new Error('Must be overwritten!');
      },
      onSkipQuestion: function() {
        throw new Error('Must be overwritten!');
      }
    };
  })();

}).call(this);
