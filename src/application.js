// Generated by CoffeeScript 1.6.3
(function() {
  var FlightControl, LightBox, LocationQuiz, Map, Menu, Plane, ProgressBar, QuizBox;

  window.App = (function() {
    var CORRECT_REGION_COLOR, INCORRECT_REGION_COLOR, MAP_CONTAINER_ID;

    MAP_CONTAINER_ID = 'map-container';

    CORRECT_REGION_COLOR = '#2ECC71';

    INCORRECT_REGION_COLOR = '#E74C3C';

    function App() {
      var _this = this;
      ProgressBar.hide();
      QuizBox.init();
      QuizBox.hide();
      QuizBox.onMenuClick = function() {
        _this._endQuiz();
        return _this._renderMap(_this.menu.getSelectedMap());
      };
      this.menu = new Menu({
        onSelectMap: $.proxy(this._renderMap, this),
        onStartQuiz: $.proxy(this._startQuiz, this)
      });
      this._renderMap(this.menu.getSelectedMap());
    }

    App.prototype._renderMap = function(mapName) {
      if (this.map) {
        this.map.destroy();
      }
      this.map = new Map(MAP_CONTAINER_ID, mapName);
      return this.map.render();
    };

    App.prototype._startQuiz = function() {
      this.menu.hide();
      this.menu.hideScore();
      this.map.clearSelectedRegions();
      this._startLocationQuiz();
      QuizBox.show();
      return ProgressBar.show();
    };

    App.prototype._startLocationQuiz = function() {
      var quiz,
        _this = this;
      quiz = new LocationQuiz(this.map.getRegions());
      QuizBox.askQuestion(quiz.getQuestion());
      QuizBox.onSkipQuestion = function() {
        return QuizBox.askQuestion(quiz.getQuestion());
      };
      return this.map.bindEvents({
        regionLabelShow: function(e, label, code) {
          return _this.map.isRegionSelected(code);
        },
        regionClick: function(e, regionCode) {
          var askedRegion, clickedRegion, nextQuestion;
          clickedRegion = _this.map.regionForCode(regionCode);
          askedRegion = quiz.currentRegion;
          if (quiz.answerQuestion(clickedRegion)) {
            _this.map.selectRegion(regionCode, CORRECT_REGION_COLOR);
          } else {
            _this.map.selectRegion(_this.map.codeForRegion(askedRegion), INCORRECT_REGION_COLOR);
          }
          ProgressBar.update(quiz.percentComplete());
          if (nextQuestion = quiz.getQuestion()) {
            return QuizBox.askQuestion(nextQuestion);
          } else {
            return _this._endQuiz();
          }
        }
      });
    };

    App.prototype._endQuiz = function() {
      QuizBox.hide();
      ProgressBar.reset();
      ProgressBar.hide();
      return this.menu.show();
    };

    return App;

  })();

  FlightControl = (function() {
    var MIN_FLIGHT_DIST;

    MIN_FLIGHT_DIST = 10;

    function FlightControl(map, maxPlaneCount, planeSpeed) {
      this.map = map;
      this.maxPlaneCount = maxPlaneCount;
      this.planeSpeed = planeSpeed;
      this.planes = [];
      this.halted = false;
    }

    FlightControl.prototype.destroyAll = function() {
      var plane, _i, _len, _ref, _results;
      _ref = this.planes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
        plane = _ref[_i];
        _results.push(plane.destroy());
      }
      return _results;
    };

    FlightControl.prototype.haltFlights = function() {
      return this.halted = true;
    };

    FlightControl.prototype.spawnFlights = function() {
      var animate,
        _this = this;
      this.halted = false;
      animate = function() {
        if (!_this.halted) {
          _this._spawnPlanes();
          _this._animatePlanes();
          return requestAnimationFrame(function() {
            return animate();
          });
        }
      };
      return animate();
    };

    FlightControl.prototype._createFlight = function() {
      var dist, end, start;
      dist = 0;
      start = this.map.getRandomLatLng();
      while (!(dist >= MIN_FLIGHT_DIST)) {
        end = this.map.getRandomLatLng();
        dist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      }
      return {
        start: start,
        end: end
      };
    };

    FlightControl.prototype._spawnPlanes = function() {
      var flight, _results;
      _results = [];
      while (!(this.planes.length >= this.maxPlaneCount)) {
        flight = this._createFlight();
        _results.push(this.planes.push(new Plane(this.map, flight.start, flight.end, this.planeSpeed)));
      }
      return _results;
    };

    FlightControl.prototype._animatePlanes = function() {
      var i, plane, _results;
      i = this.planes.length;
      _results = [];
      while (i--) {
        plane = this.planes[i];
        if (plane.hasLanded()) {
          plane.destroy();
          _results.push(this.planes.splice(i, 1));
        } else {
          plane.update();
          _results.push(plane.render());
        }
      }
      return _results;
    };

    return FlightControl;

  })();

  LightBox = (function() {
    var backdrop;

    backdrop = $('<div class="light-box-bg"></div>');

    LightBox.showBackdrop = (function() {
      var added;
      added = false;
      return function() {
        if (added) {
          return backdrop.show();
        } else {
          $(document.body).append(backdrop);
          return added = true;
        }
      };
    })();

    LightBox.hideBackdrop = function() {
      return backdrop.hide();
    };

    function LightBox(containerID) {
      this.el = $('#' + containerID);
      this._centerInWindow();
      this.show();
      this._bindEvents();
    }

    LightBox.prototype.hide = function() {
      LightBox.hideBackdrop();
      return this.el.hide();
    };

    LightBox.prototype.show = function() {
      LightBox.showBackdrop();
      return this.el.show();
    };

    LightBox.prototype._bindEvents = function() {
      var _this = this;
      return $(window).resize(function() {
        return _this._centerInWindow();
      });
    };

    LightBox.prototype._centerInWindow = function() {
      var $window, verticalOffset;
      $window = $(window);
      verticalOffset = 50;
      return this.el.css({
        left: ($window.width() - this.el.width()) / 2,
        top: (($window.height() - this.el.height()) / 2) - verticalOffset
      });
    };

    return LightBox;

  })();

  LocationQuiz = (function() {
    function LocationQuiz(regions) {
      this.regions = regions;
      this.regionsCount = regions.length;
      this.currentRegion = null;
      this.numCorrect = 0;
    }

    LocationQuiz.prototype.getQuestion = function() {
      var randomIndex;
      if (this.regions.length === 0) {
        return null;
      } else {
        randomIndex = Math.floor(Math.random() * this.regions.length);
        this.currentRegion = this.regions[randomIndex];
        return "Where is " + this.currentRegion + "?";
      }
    };

    LocationQuiz.prototype.answerQuestion = function(answer) {
      var correct, index;
      index = $.inArray(this.currentRegion, this.regions);
      this.regions.splice(index, 1);
      correct = answer === this.currentRegion;
      if (correct) {
        this.numCorrect += 1;
      }
      this.currentRegion = null;
      return correct;
    };

    LocationQuiz.prototype.percentComplete = function() {
      return (1 - this.regions.length / this.regionsCount) * 100;
    };

    LocationQuiz.prototype.status = function() {
      return {
        questionsLeft: this.regions.length,
        questionCount: this.regionsCount,
        numCorrect: this.numCorrect
      };
    };

    return LocationQuiz;

  })();

  Map = (function() {
    var BACKGROUND_COLOR, MAX_PLANE_COUNT, PLANE_SPEED;

    BACKGROUND_COLOR = '#2980B9';

    MAX_PLANE_COUNT = 20;

    PLANE_SPEED = 1 / 10;

    Map.loadMap = (function() {
      var loaded;
      loaded = {};
      return function(mapName, callback) {
        if (loaded[mapName]) {
          return callback();
        } else {
          return $.get("vendor/jvectormap/maps/" + mapName + ".js", function(loadScript) {
            eval(loadScript);
            loaded[mapName] = true;
            return callback();
          });
        }
      };
    })();

    function Map(containerID, mapName) {
      this.el = $('#' + containerID);
      this.mapName = mapName;
    }

    Map.prototype.render = function() {
      var _this = this;
      return Map.loadMap(this.mapName, function() {
        _this._createMap();
        _this.flightController = new FlightControl(_this, MAX_PLANE_COUNT, PLANE_SPEED);
        return _this.flightController.spawnFlights();
      });
    };

    Map.prototype.destroy = function() {
      this.el.empty();
      this.flightController.haltFlights();
      return this.flightController.destroyAll();
    };

    Map.prototype.clearSelectedRegions = function() {
      return this.map.clearSelectedRegions();
    };

    Map.prototype.isRegionSelected = function(regionCode) {
      var selected;
      selected = this.map.getSelectedRegions();
      return $.inArray(regionCode, selected) !== -1;
    };

    Map.prototype.selectRegion = function(regionCode, color) {
      this.map.regions[regionCode].element.style.selected.fill = color;
      return this.map.setSelectedRegions(regionCode);
    };

    Map.prototype.codeForRegion = function(regionName) {
      var data, regionCode, _ref;
      _ref = this.map.regions;
      for (regionCode in _ref) {
        data = _ref[regionCode];
        if (data.config.name === regionName) {
          return regionCode;
        }
      }
    };

    Map.prototype.regionForCode = function(regionCode) {
      return this.map.getRegionName(regionCode);
    };

    Map.prototype.getRegions = function() {
      var data, regionCode, _ref, _results;
      _ref = this.map.regions;
      _results = [];
      for (regionCode in _ref) {
        data = _ref[regionCode];
        _results.push(data.config.name);
      }
      return _results;
    };

    Map.prototype.latLngToPoint = function(lat, lng) {
      return this.map.latLngToPoint(lat, lng);
    };

    Map.prototype.bindEvents = function(events) {
      var callback, event, _results;
      this.el.unbind();
      _results = [];
      for (event in events) {
        callback = events[event];
        _results.push(this.el.bind("" + event + ".jvectormap", callback));
      }
      return _results;
    };

    Map.prototype.getRandomLatLng = function() {
      var bBox, latLng, point, randKey, region;
      if (this.regionKeys == null) {
        this.regionKeys = Object.keys(this.map.regions);
      }
      latLng = null;
      randKey = this.regionKeys[Math.floor(Math.random() * this.regionKeys.length)];
      region = this.map.regions[randKey];
      bBox = region.element.node.getBoundingClientRect();
      while (!latLng) {
        point = {
          x: bBox.left + Math.random() * bBox.width,
          y: bBox.top + Math.random() * bBox.height
        };
        latLng = this.map.pointToLatLng(point.x, point.y);
      }
      return latLng;
    };

    Map.prototype._createMap = function() {
      this.el.vectorMap({
        map: this.mapName,
        backgroundColor: BACKGROUND_COLOR
      });
      return this.map = this.el.vectorMap('get', 'mapObject');
    };

    return Map;

  })();

  Menu = (function() {
    function Menu(opts) {
      this.onSelectMap = opts.onSelectMap;
      this.onStartQuiz = opts.onStartQuiz;
      this._createMenu();
      this.hideScore();
      this._bindEvents();
    }

    Menu.prototype.show = function() {
      return this.lightbox.show();
    };

    Menu.prototype.hide = function() {
      return this.lightbox.hide();
    };

    Menu.prototype.getSelectedMap = function() {
      return $('#map-type .pure-button-active').first().data('map');
    };

    Menu.prototype.showScore = function(numCorrect) {
      return $('#score').show().children('span').text(numCorrect);
    };

    Menu.prototype.hideScore = function(numCorrect) {
      return $('#score').hide();
    };

    Menu.prototype._createMenu = function() {
      return this.lightbox = new LightBox('menu');
    };

    Menu.prototype._bindEvents = function() {
      var _this = this;
      $('#start-quiz').click($.proxy(this.onStartQuiz, this));
      return $('#map-type .pure-button').click((function() {
        var $active;
        $active = $('#map-type .pure-button-active');
        return function(e) {
          var $target;
          $target = $(e.target);
          if (!$target.hasClass('pure-button-active')) {
            $active.removeClass('pure-button-active');
            $active = $(e.target).addClass('pure-button-active');
            return _this.onSelectMap(_this.getSelectedMap());
          }
        };
      })());
    };

    return Menu;

  })();

  Plane = (function() {
    var PLANE_IMGS, PLANE_SIZE;

    PLANE_IMGS = ['imgs/airplane_orange.svg', 'imgs/airplane_blue.svg'];

    PLANE_SIZE = 20;

    Plane.getRandomPlaneImg = function() {
      return PLANE_IMGS[Math.floor(Math.random() * PLANE_IMGS.length)];
    };

    function Plane(map, start, end, speed) {
      this.map = map;
      this.end = end;
      this.speed = speed;
      this.pos = start;
      this.flightDist = Math.sqrt(Math.pow(end.lng - start.lng, 2) + Math.pow(end.lat - start.lat, 2));
      this.el = $("<img class='plane' src='" + (Plane.getRandomPlaneImg()) + "' />");
      this.map.el.append(this.el);
    }

    Plane.prototype.destroy = function() {
      return this.el.remove();
    };

    Plane.prototype.hasLanded = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return distLeft <= this.speed;
    };

    Plane.prototype.update = function() {
      var distLeft, dx, dy;
      dx = this.end.lng - this.pos.lng;
      dy = this.end.lat - this.pos.lat;
      this.ang = Math.atan2(dy, dx);
      this.pos.lng += Math.cos(this.ang) * this.speed;
      this.pos.lat += Math.sin(this.ang) * this.speed;
      distLeft = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      return this.amplitude = Math.sin((distLeft / this.flightDist) * Math.PI);
    };

    Plane.prototype.render = function() {
      var curveHeight, curvedLat, curvedLng, facingAng, pos, size;
      size = this.amplitude * (PLANE_SIZE * 2);
      size = size > PLANE_SIZE ? PLANE_SIZE : size;
      curveHeight = this.amplitude * 3;
      curvedLng = this.pos.lng - curveHeight * Math.sin(this.ang);
      curvedLat = this.pos.lat + curveHeight * Math.cos(this.ang);
      pos = this.map.latLngToPoint(curvedLat, curvedLng);
      facingAng = Math.atan2(curvedLat - this.oldLat || this.pos.lat, curvedLng - this.oldLng || this.pos.lng);
      this.oldLng = curvedLng;
      this.oldLat = curvedLat;
      if (pos) {
        return this.el.show().css({
          left: pos.x,
          top: pos.y,
          width: size,
          height: size,
          '-webkit-transform': "rotate(" + (-facingAng) + "rad)"
        });
      } else {
        return this.el.hide();
      }
    };

    return Plane;

  })();

  ProgressBar = (function() {
    var $el;
    $el = $('#progress-bar');
    return {
      show: function() {
        return $el.show();
      },
      hide: function() {
        return $el.hide();
      },
      reset: function() {
        return $el.css('width', 0);
      },
      update: function(percentComplete) {
        return $el.css('width', "" + percentComplete + "%");
      }
    };
  })();

  QuizBox = (function() {
    var $el;
    $el = $('#quiz-box');
    return {
      init: function() {
        $el.children('.skip-question').click(function() {
          return QuizBox.onSkipQuestion();
        });
        return $el.children('.main-menu').click(function() {
          return QuizBox.onMenuClick();
        });
      },
      askQuestion: function(question) {
        return $el.children('h3').text(question);
      },
      show: function() {
        return $el.show();
      },
      hide: function() {
        return $el.hide();
      },
      onMenuClick: function() {
        throw new Error('Must be overwritten!');
      },
      onSkipQuestion: function() {
        throw new Error('Must be overwritten!');
      }
    };
  })();

}).call(this);
